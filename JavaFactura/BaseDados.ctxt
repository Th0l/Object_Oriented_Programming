#BlueJ class context
comment0.target=BaseDados
comment1.params=
comment1.target=BaseDados()
comment1.text=\r\n\ Construtor\ vazio\r\n
comment10.params=
comment10.target=java.util.HashMap\ getFatura()
comment10.text=\r\n\ M\u00E9todo\ usado\ para\ se\ obter\ as\ faturas\r\n\ @returns\ Um\ \ HashMap<Long,Faturas>\ com\ todas\ as\ faturas\ emitidas\r\n
comment11.params=nif\ sort
comment11.target=java.util.ArrayList\ getFaturaByNif(long,\ int)
comment12.params=ft
comment12.target=void\ setFatura(java.util.HashMap)
comment12.text=\r\n\ M\u00E9todo\ usado\ para\ se\ atualizar\ as\ faturas\r\n
comment13.params=nif\ password\ UserType
comment13.target=boolean\ checkCredenciais(long,\ java.lang.String,\ int)
comment13.text=\r\n\ Fun\u00E7\u00E3o\ que\ vai\ verificar\ se\ um\ certo\ nif\ pertence\ \u00E1\ base\ de\ dados\r\n\ @params\ nif\ O\ Nif\ do\ contribuinte\ que\ esta\ a\ tentar\ fazer\ login\r\n\ @params\ password\ A\ password\ do\ contribuinte\ que\ esta\ a\ tentar\ fazer\ login\r\n\ @params\ UserType\ \u00C9\ 1\ se\ for\ contribuinte\ individual\ e\ 2\ se\ for\ contribuinte\ colectivo\r\n\ @returns\ True\ ou\ False\ dependendo\ se\ existe\ ou\ n\u00E3o\r\n
comment14.params=
comment14.target=void\ checkContent()
comment2.params=
comment2.target=void\ WriteData()
comment2.text=\r\n\ Fun\u00E7\u00E3o\ que\ vai\ escrever\ atraves\ de\ serializa\u00E7\u00E3o\ ambas\ as\ HashTables\ num\ ficheiro\ \r\n
comment3.params=
comment3.target=void\ LoadData()
comment3.text=\r\n\ M\u00E9todo\ que\ vai\ decifrar\ o\ ficheiro\ com\ a\ informa\u00E7\u00E3o\ das\ hash's\r\n
comment4.params=
comment4.target=void\ FileWipe()
comment4.text=\r\n\ M\u00E9todo\ usada\ para\ eliminar\ todos\ os\ conteudos\ do\ ficheiro\r\n
comment5.params=insert
comment5.target=void\ addIndividual(C_Individual)
comment5.text=\r\n\ M\u00E9todo\ que\ permite\ adicionar\ um\ novo\ contribuinte\ individual\ \u00E1\ sua\ HashMap\ correspondente\r\n\ @params\ insert\ o\ contribuinte\ que\ se\ pretende\ adicionar\r\n
comment6.params=insert
comment6.target=void\ addColectivo(C_Colectivo)
comment6.text=\r\n\ M\u00E9todo\ que\ permite\ adicionar\ um\ novo\ contribuinte\ colectivo\ \u00E1\ sua\ HashMap\ correspondente\r\n\ @params\ insert\ o\ contribuinte\ que\ se\ pretende\ adicionar\r\n
comment7.params=insert
comment7.target=void\ addFatura(Faturas)
comment7.text=\r\n\ M\u00E9todo\ que\ permite\ adicionar\ um\ novo\ conjunto\ de\ Faturas\ \u00E1\ sua\ HashMap\ correspondente\r\n\ @params\ insert\ o\ conjunto\ que\ se\ pretende\ adicionar\r\n
comment8.params=
comment8.target=java.util.HashMap\ getIndividual()
comment8.text=\r\n\ M\u00E9todo\ usado\ para\ se\ obter\ os\ contribuintes\ individuais\r\n\ @returns\ Um\ \ HashMap<Long,C_Individual>\ com\ todos\ os\ contribuintes\ individuais\r\n
comment9.params=
comment9.target=java.util.HashMap\ getColectivo()
comment9.text=\r\n\ M\u00E9todo\ usado\ para\ se\ obter\ os\ contribuintes\ colectivos\r\n\ @returns\ Um\ \ HashMap<Long,C_Colectivo>\ com\ todos\ os\ contribuintes\ colectivos\r\n
numComments=15
